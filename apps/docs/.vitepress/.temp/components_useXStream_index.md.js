import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderComponent, ssrRenderStyle } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"useXStream 🌱","description":"","frontmatter":{},"headers":[],"relativePath":"components/useXStream/index.md","filePath":"components/useXStream/index.md","lastUpdated":1745920435000}');
const _sfc_main = { name: "components/useXStream/index.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  const _component_demo = resolveComponent("demo");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="usexstream-🌱" tabindex="-1">useXStream 🌱 <a class="header-anchor" href="#usexstream-🌱" aria-label="Permalink to &quot;useXStream 🌱&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>这个钩子函数，可以让用户更方便的控制 <strong>流式请求</strong>。提供 <code>发起请求</code> ，<code>中断请求</code> ，返回 <code>loading</code> 请求状态，返回 SSE 协议 <code>实时的数据流</code>，返回请求 <code>error</code> 信息。</p><div class="info custom-block"><p class="custom-block-title">💌 消息</p><p>目前只测试了 SSE 和 SIP 协议请求，其他协议的请求还有待测试，如果您好的想法和发现，欢迎进交流群 👨‍👩‍👧‍👧 <strong><a href="https://element-plus-x.com/introduce.html#%F0%9F%91%A5-%E7%A4%BE%E5%8C%BA%E6%94%AF%E6%8C%81" target="_blank" rel="noreferrer">交流群</a></strong>，与我们取得联系，欢迎交流方案，提交 issue 和 pr。提交规范请阅读 👉 <strong><a href="https://element-plus-x.com/guide/develop.html" target="_blank" rel="noreferrer">开发文档</a></strong></p></div><h2 id="代码演示" tabindex="-1">代码演示 <a class="header-anchor" href="#代码演示" aria-label="Permalink to &quot;代码演示&quot;">​</a></h2>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/useXStream/demos/useSSE.vue" }, null, _parent));
  _push(ssrRenderComponent(_component_demo, { src: "components/useXStream/demos/useSIP.vue" }, null, _parent));
  _push(`<div class="warning custom-block"><p class="custom-block-title">📌 注意</p><p>这个 hooks 的解析规则，也和 ant-design-x 一致，都是在内部做了处理。<strong>请放心切换使用</strong></p><p>sseEventPart <strong><code>&#39;event: message\\ndata: {&quot;id&quot;:&quot;\${i}&quot;,&quot;content&quot;:&quot;\${contentChunks[i]}&quot;}\\n\\n&#39;</code></strong></p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 数据流默认分隔符（使用两个换行符，分割一条流数据）</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> DEFAULT_STREAM_SEPARATOR</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">\\n\\n</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 分段默认分隔符（使用单个换行符，换行当前数据）</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> DEFAULT_PART_SEPARATOR</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">\\n</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 键值对默认分隔符（使用冒号）</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> DEFAULT_KV_SEPARATOR</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;:&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><h2 id="返回钩子" tabindex="-1">返回钩子 <a class="header-anchor" href="#返回钩子" aria-label="Permalink to &quot;返回钩子&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性名</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>startStream</td><td>开始请求流模式接口</td><td><code>({readableStream, transformStream}) =&gt; void</code></td></tr><tr><td>cancel</td><td>中断流式请求</td><td><code>() =&gt; void</code></td></tr><tr><td>loading</td><td>是否正在请求流式数据</td><td><code>boolean</code></td></tr><tr><td>data</td><td>实时返回的流式数据</td><td><code>string</code></td></tr><tr><td>error</td><td>流式请求报错信息</td><td><code>string</code></td></tr></tbody></table></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/useXStream/index.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const index = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  index as default
};
