import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderComponent } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Sender 输入框 💭","description":"","frontmatter":{},"headers":[],"relativePath":"components/sender/index.md","filePath":"components/sender/index.md","lastUpdated":1746503545000}');
const _sfc_main = { name: "components/sender/index.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  const _component_demo = resolveComponent("demo");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="sender-输入框-💭" tabindex="-1">Sender 输入框 💭 <a class="header-anchor" href="#sender-输入框-💭" aria-label="Permalink to &quot;Sender 输入框 💭&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">📌 注意</p><p><code>1.1.6 版本</code> 新增</p><ul><li>变体 <strong><code>上下结构</code></strong></li><li>自定义底部 <code>#footer</code> 插槽</li><li>自定义指令 <code>弹框</code> 和 触发指令的 <code>回调事件</code></li></ul><p>🐵 此温馨提示更新时间：<code>2025-04-16</code></p></div><div class="danger custom-block"><p class="custom-block-title">💔 危险</p><p><code>1.0.81 版本</code> ，以及更早版本。使用 <code>v-model:value</code> 绑定是有响应式问题的，请升级最新版本。</p><p>最新版本写法，直接使用 <code>v-model</code> 进行双向绑定。</p><p>此警告更新时间：<code>2025-04-06</code></p></div><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p><code>Sender</code> 是用于聊天的输入框组件。具备丰富的交互功能和自定义特性。它支持语音输入、清空输入内容、多种提交方式，并且允许用户自定义头部、前缀和操作列表等内容。同时，组件提供了焦点控制、提交回调等功能，可满足多样化的输入场景需求。</p><h2 id="代码演示" tabindex="-1">代码演示 <a class="header-anchor" href="#代码演示" aria-label="Permalink to &quot;代码演示&quot;">​</a></h2><h3 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/basic.vue" }, null, _parent));
  _push(`<h3 id="提示语" tabindex="-1">提示语 <a class="header-anchor" href="#提示语" aria-label="Permalink to &quot;提示语&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/placeholder.vue" }, null, _parent));
  _push(`<h3 id="双向绑定-未绑定-值不会变" tabindex="-1">双向绑定（未绑定，值不会变） <a class="header-anchor" href="#双向绑定-未绑定-值不会变" aria-label="Permalink to &quot;双向绑定（未绑定，值不会变）&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/v-model.vue" }, null, _parent));
  _push(`<h3 id="提交按钮禁用状态" tabindex="-1">提交按钮禁用状态 <a class="header-anchor" href="#提交按钮禁用状态" aria-label="Permalink to &quot;提交按钮禁用状态&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/submit-btn-disabled.vue" }, null, _parent));
  _push(`<h3 id="自定义最大行数和最小行数" tabindex="-1">自定义最大行数和最小行数 <a class="header-anchor" href="#自定义最大行数和最小行数" aria-label="Permalink to &quot;自定义最大行数和最小行数&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/autosize.vue" }, null, _parent));
  _push(`<h3 id="输入框组件各种状态" tabindex="-1">输入框组件各种状态 <a class="header-anchor" href="#输入框组件各种状态" aria-label="Permalink to &quot;输入框组件各种状态&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/state.vue" }, null, _parent));
  _push(`<h3 id="提交方式" tabindex="-1">提交方式 <a class="header-anchor" href="#提交方式" aria-label="Permalink to &quot;提交方式&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/submit-type.vue" }, null, _parent));
  _push(`<h3 id="语音识别" tabindex="-1">语音识别 <a class="header-anchor" href="#语音识别" aria-label="Permalink to &quot;语音识别&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">📌 注意</p><p>浏览器内置语音识别 API，可以使用组件库内置的 <a href="https://element-plus-x.com/components/useRecord/" target="_blank" rel="noreferrer"><code>useRecord</code></a> <strong>hooks</strong> 更方便内置语音识别集成和控制</p></div>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/allow-speech.vue" }, null, _parent));
  _push(`<h3 id="变体-垂直样式" tabindex="-1">变体-垂直样式 <a class="header-anchor" href="#变体-垂直样式" aria-label="Permalink to &quot;变体-垂直样式&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/variant.vue" }, null, _parent));
  _push(`<h3 id="自定义操作列表" tabindex="-1">自定义操作列表 <a class="header-anchor" href="#自定义操作列表" aria-label="Permalink to &quot;自定义操作列表&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/action-list.vue" }, null, _parent));
  _push(`<h3 id="自定义前缀" tabindex="-1">自定义前缀 <a class="header-anchor" href="#自定义前缀" aria-label="Permalink to &quot;自定义前缀&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/prefix.vue" }, null, _parent));
  _push(`<h3 id="自定义头部" tabindex="-1">自定义头部 <a class="header-anchor" href="#自定义头部" aria-label="Permalink to &quot;自定义头部&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/header.vue" }, null, _parent));
  _push(`<h3 id="自定义底部" tabindex="-1">自定义底部 <a class="header-anchor" href="#自定义底部" aria-label="Permalink to &quot;自定义底部&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/footer.vue" }, null, _parent));
  _push(`<h3 id="自定义输入框样式" tabindex="-1">自定义输入框样式 <a class="header-anchor" href="#自定义输入框样式" aria-label="Permalink to &quot;自定义输入框样式&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/input-style.vue" }, null, _parent));
  _push(`<h3 id="触发指令" tabindex="-1">触发指令 <a class="header-anchor" href="#触发指令" aria-label="Permalink to &quot;触发指令&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/trigger.vue" }, null, _parent));
  _push(`<h3 id="输入框聚焦控制" tabindex="-1">输入框聚焦控制 <a class="header-anchor" href="#输入框聚焦控制" aria-label="Permalink to &quot;输入框聚焦控制&quot;">​</a></h3>`);
  _push(ssrRenderComponent(_component_demo, { src: "components/sender/demos/focus.vue" }, null, _parent));
  _push(`<h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>是否必填</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>v-model</code></td><td>String</td><td>否</td><td>&#39;&#39;</td><td>输入框的绑定值，使用 <code>v-model</code> 进行双向绑定。</td></tr><tr><td><code>placeholder</code></td><td>String</td><td>否</td><td>&#39;&#39;</td><td>输入框的提示语文本。</td></tr><tr><td><code>auto-size</code></td><td>Object</td><td>否</td><td>{ minRows:1, maxRows:6 }</td><td>设置输入框的最小展示行数和最大展示行数。</td></tr><tr><td><code>read-only</code></td><td>Boolean</td><td>否</td><td>false</td><td>输入框是否为只读状态。</td></tr><tr><td><code>disabled</code></td><td>Boolean</td><td>否</td><td>false</td><td>输入框是否为禁用状态。</td></tr><tr><td><code>submitBtnDisabled</code></td><td>Boolean | undefined</td><td>否</td><td>undefined</td><td>内置发送按钮禁用状态。(注意使用场景)</td></tr><tr><td><code>loading</code></td><td>Boolean</td><td>否</td><td>false</td><td>是否显示加载状态。为 <code>true</code> 时，输入框会显示加载动画。</td></tr><tr><td><code>clearable</code></td><td>Boolean</td><td>否</td><td>false</td><td>输入框是否可清空内容。展示默认清空按钮</td></tr><tr><td><code>allowSpeech</code></td><td>Boolean</td><td>否</td><td>false</td><td>是否允许语音输入。默认展示内置语音识别按钮,内置浏览器内置语音识别 API</td></tr><tr><td><code>submitType</code></td><td>String</td><td>否</td><td>&#39;enter&#39;</td><td>提交方式，支持 <code>&#39;shiftEnter&#39;</code>（按 <code>Shift + Enter</code> 提交）。</td></tr><tr><td><code>headerAnimationTimer</code></td><td>Number</td><td>否</td><td>300</td><td>输入框的自定义头部显示时长，单位为 <code>ms</code>。</td></tr><tr><td><code>inputWidth</code></td><td>String</td><td>否</td><td>&#39;100%&#39;</td><td>输入框的宽度。</td></tr><tr><td><code>variant</code></td><td>String</td><td>否</td><td>&#39;default&#39;</td><td>输入框的变体类型，支持 <code>&#39;default&#39;</code>、<code>&#39;updown&#39;</code>。</td></tr><tr><td><code>showUpdown</code></td><td>Boolean</td><td>否</td><td>true</td><td>当变体为 <code>updown</code> 时，是否展示内置样式。</td></tr><tr><td><code>inputStyle</code></td><td>Object</td><td>否</td><td>{}</td><td>输入框的样式。</td></tr><tr><td><code>triggerStrings</code></td><td>string[]</td><td>否</td><td>[]</td><td>触发指令的 <code>字符串数组</code>。</td></tr><tr><td><code>triggerPopoverVisible</code></td><td>Boolean</td><td>否</td><td>false</td><td>触发指令的 <code>弹框</code> 是否可见。需要使用 <code>v-model:triggerPopoverVisible</code> 进行控制。</td></tr><tr><td><code>triggerPopoverWidth</code></td><td>String</td><td>否</td><td>&#39;fit-content&#39;</td><td>触发指令的 <code>弹框</code> 的宽度。可使用百分比等css单位。</td></tr><tr><td><code>triggerPopoverLeft</code></td><td>String</td><td>否</td><td>&#39;0px&#39;</td><td>触发指令的 <code>弹框</code> 的左边距。可使用百分比等css单位。</td></tr><tr><td><code>triggerPopoverOffset</code></td><td>Number</td><td>否</td><td>8</td><td>触发指令的 <code>弹框</code> 的左边距。只能是数字类型，单位px</td></tr><tr><td><code>triggerPopoverPlacement</code></td><td>String</td><td>否</td><td>&#39;top-start&#39;</td><td>触发指令的 <code>弹框</code> 的位置。取值：<code>&#39;top&#39;</code> | <code>&#39;top-start&#39;</code> | <code>&#39;top-end&#39;</code> | <code>&#39;bottom&#39;</code> | <code>&#39;bottom-start&#39;</code> | <code>&#39;bottom-end&#39;</code> | <code>&#39;left&#39;</code> | <code>&#39;left-start&#39;</code> | <code>&#39;left-end&#39;</code> | <code>&#39;right&#39;</code> | <code>&#39;right-start&#39;</code> | <code>&#39;right-end&#39;</code></td></tr></tbody></table><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件名</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td><code>submit</code></td><td>内置 <code>提交按钮</code> 提交时触发的事件。</td><td>无</td></tr><tr><td><code>cancel</code></td><td>内置 <code>loading按钮</code> 点击时触发的事件。</td><td>无</td></tr><tr><td><code>recordingChange</code></td><td>内置语音识别状态变化时触发的事件。</td><td>无</td></tr><tr><td><code>trigger</code></td><td>指令弹框发生变化时触发的事件。</td><td><code>interface TriggerEvent{oldValue: string; newValue: string; isOpen: boolean; }</code></td></tr></tbody></table><h2 id="ref-实例方法" tabindex="-1">Ref 实例方法 <a class="header-anchor" href="#ref-实例方法" aria-label="Permalink to &quot;Ref 实例方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>openHeader</code></td><td>Function</td><td>打开输入框的自定义头部。</td></tr><tr><td><code>closeHeader</code></td><td>Function</td><td>关闭输入框的自定义头部。</td></tr><tr><td><code>clear</code></td><td>Function</td><td>清空输入框的内容。</td></tr><tr><td><code>blur</code></td><td>Function</td><td>移除输入框的焦点。</td></tr><tr><td><code>focus</code></td><td>Function</td><td>聚焦输入框。 默认 <code>focus(&#39;all&#39;)</code> 聚焦整个文本，<code>focus(&#39;start&#39;)</code> 聚焦文本最前方，<code>focus(&#39;end&#39;)</code> 聚焦文本最后方。</td></tr><tr><td><code>submit</code></td><td>Function</td><td>提交输入内容。</td></tr><tr><td><code>cancel</code></td><td>Function</td><td>取消加载状态。</td></tr><tr><td><code>startRecognition</code></td><td>Function</td><td>开始语音识别。</td></tr><tr><td><code>stopRecognition</code></td><td>Function</td><td>停止语音识别。</td></tr></tbody></table><h2 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h2><table tabindex="0"><thead><tr><th>插槽名</th><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>#header</code></td><td>-</td><td>Slot</td><td>用于自定义输入框的头部内容。</td></tr><tr><td><code>#prefix</code></td><td>-</td><td>Slot</td><td>用于自定义输入框的前缀内容。</td></tr><tr><td><code>#action-list</code></td><td>-</td><td>Slot</td><td>用于自定义输入框的操作列表内容。</td></tr><tr><td><code>#footer</code></td><td>-</td><td>Slot</td><td>用于自定义输入框的尾部内容。</td></tr></tbody></table><h2 id="功能特性" tabindex="-1">功能特性 <a class="header-anchor" href="#功能特性" aria-label="Permalink to &quot;功能特性&quot;">​</a></h2><ol><li><strong>焦点控制</strong>：支持将焦点设置到文本最前方、最后方或选中整个文本，也可取消焦点。</li><li><strong>自定义内容</strong>：提供头部、前缀、操作列表等插槽，允许用户自定义这些部分的内容。</li><li><strong>提交功能</strong>：支持按 <code>Shift + Enter</code> 提交输入内容，提交后可执行自定义操作。</li><li><strong>加载状态</strong>：可显示加载状态，模拟提交处理过程。</li><li><strong>语音输入</strong>：支持语音输入功能，提升输入的便捷性。</li><li><strong>清空功能</strong>：输入框可清空内容，方便用户重新输入。</li></ol></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/sender/index.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const index = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  index as default
};
