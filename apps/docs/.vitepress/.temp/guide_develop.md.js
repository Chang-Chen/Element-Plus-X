import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/develop.md","filePath":"guide/develop.md","lastUpdated":1745920435000}');
const _sfc_main = { name: "guide/develop.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h4 id="一、克隆仓库" tabindex="-1"><strong>一、克隆仓库</strong> <a class="header-anchor" href="#一、克隆仓库" aria-label="Permalink to &quot;**一、克隆仓库**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">git</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> clone</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> https://github.com/HeJiaYue520/Element-Plus-X.git</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">cd</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> Element-Plus-X</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="二、安装依赖" tabindex="-1"><strong>二、安装依赖</strong> <a class="header-anchor" href="#二、安装依赖" aria-label="Permalink to &quot;**二、安装依赖**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">pnpm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> install</span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"> # 推荐使用 PNPM 管理依赖</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="三、项目结构" tabindex="-1"><strong>三、项目结构</strong> <a class="header-anchor" href="#三、项目结构" aria-label="Permalink to &quot;**三、项目结构**&quot;">​</a></h4><ul><li><p>docs 文档：由于该文档目前还存在架构问题，目前没有放在开源项目中，后续弄好会放在源码中开源</p></li><li><p>playground：暂定的代码测试及演示地方，项目初期，为了方便大家提交 pr ，也为了方便项目的简洁。不考虑做测试用例。</p></li><li><p>packages/components：组件库项目源码，在调试前需要 <strong>先构建此项目才能生效</strong> ，或直接在 playground 的 演示 vue 文件中使用 文件 <strong>路经访问</strong> 该项目</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 在 playground/src/components/XXXDemo.vue 文件中</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 例如，这样用绝对路经引入就不需要构建，直接访问，每次热更新都能立马看到效果，方便你本地调试开发</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> Bubble </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">from</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;vue-element-plus-x/src/components/Bubble/index.vue&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>以下是主要的 <strong><code>项目目录结构</code></strong> 请先对照查看，方便你对项目目录有所了解</p><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── .github                     # CI/CD 配置</span></span>
<span class="line"><span>├── apps</span></span>
<span class="line"><span>|   ├── docs                    # 文档源码（基于 VitePress）</span></span>
<span class="line"><span>|   ├── playground              # 演示源码</span></span>
<span class="line"><span>├── packages</span></span>
<span class="line"><span>│   └── components              # 组件源码</span></span>
<span class="line"><span>|       ├──.build               # 自动化构建处理</span></span>
<span class="line"><span>|       └──src</span></span>
<span class="line"><span>|          ├──— components      # 组件核心源码</span></span>
<span class="line"><span>|          |    ├── Bubble      # 气泡组件</span></span>
<span class="line"><span>|          |    ├── BubbleList  # 气泡列表</span></span>
<span class="line"><span>|          |    ├── sender      # 输入框</span></span>
<span class="line"><span>|          |    ├── Typewriter  # 打字器组件</span></span>
<span class="line"><span>|          |    └── ...         # 更多组件</span></span>
<span class="line"><span>|          └── hooks            # 核心 Hooks 源码</span></span>
<span class="line"><span>|</span></span>
<span class="line"><span>|</span></span>
<span class="line"><span>└── package.json                # 项目配置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="四、开发命令" tabindex="-1"><strong>四、开发命令</strong> <a class="header-anchor" href="#四、开发命令" aria-label="Permalink to &quot;**四、开发命令**&quot;">​</a></h4><p><strong>请先构建好组件在执行预览</strong></p><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>pnpm build:components</code></td><td>在本地构建生产版本</td></tr><tr><td><code>pnpm dev:playground</code></td><td>启动组件测试使用预览</td></tr><tr><td><code>pnpm dev:docs</code></td><td>本地预览文档 (文档暂未集成在开源中... 预计在 5月中旬会优化好项目架构，开源出来)</td></tr></tbody></table><h4 id="五、成为贡献者" tabindex="-1"><strong>五、成为贡献者</strong> <a class="header-anchor" href="#五、成为贡献者" aria-label="Permalink to &quot;**五、成为贡献者**&quot;">​</a></h4><blockquote><p>🥰 在提交 pr 之前，我们非常希望，也非常欢迎，你能加入我们的交流群。</p><p>😔 为了避免浪费你宝贵的时间。请先在交流群中沟通和讨论，和我们团队项目负责人取得联系，一起交流，确定好想做的功能，明确好要做的需求。</p><p>💌 提交 pr 后我们可以相互交流，互相学习。集思广益，改进 pr 方案，共同进步。期待你的加入</p></blockquote><ol><li><p><strong>创建一个自己的分支</strong>：</p><p>分支管理尤为重要，我们决定将 main 分支，作为上线的主分支，我们的 pr 提交，全部合并到 dev 开发分支。在创建 pr 后，我们会将先检查，哪些是较为有用的 pr ，当我们认可了你的提交后，我们会为你创建新的分支，将你的代码合并到该分支中，同时我们会将代码拉取，本地运行审核。如果有需要改进的地方，我们会及时向您反馈。如果我们审没有通过，也会给出相关的建议，请放心大胆的提交的想法和创意。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">git</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> checkout</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -b</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> feature/new-component</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (new-component </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">就是你的分支名</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>代码规范</strong>：</p><p>请在执行完开发命令后，安装并打开 <strong>Vs Code 的 <code>ESLint</code> 插件</strong> 使用 <code>ESLint.9x</code> 格式化代码（保存代码时自动检查）</p><ul><li><p>组件命名遵循 <code>PascalCase</code> 规范</p></li><li><p>每个组件包含：</p></li></ul><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── components      # 组件涉及到的子组件 （可选）</span></span>
<span class="line"><span>├── index.vue       # 组件实现</span></span>
<span class="line"><span>└── types.d.ts      # 类型定义</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>提交 PR</strong>：</p><ul><li>标题格式：<code>feat(component): 新增打字机组件</code></li><li>描述包含：功能说明、使用示例、变更影响</li></ul></li><li><p><strong>研究审核</strong>：</p><p>🙋 再次提醒：我们会将先检查，哪些是有效的 pr ，当我们认可了你的提交后，我们会为你创建新的分支，将你的代码合并到该分支中，同时我们会将代码拉取，本地运行审核。如果有需要改进的地方，我们会及时向您反馈。如果我们审没有通过，也会给出相关的建议，请放心大胆的提交的想法和创意。</p></li></ol><h4 id="六、调试本地包" tabindex="-1"><strong>六、调试本地包</strong> <a class="header-anchor" href="#六、调试本地包" aria-label="Permalink to &quot;**六、调试本地包**&quot;">​</a></h4><p>在示例项目中链接本地代码：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 先本地构建</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">pnpm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> build:components</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 示例项目执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">pnpm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> dev:playground</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="七、常见问题" tabindex="-1">七、<strong>常见问题</strong> <a class="header-anchor" href="#七、常见问题" aria-label="Permalink to &quot;七、**常见问题**&quot;">​</a></h4><ol><li><p><strong>样式冲突</strong>：</p><ul><li>确保没有重复引入 Element-Plus 样式</li><li>使用 <code>deep()</code> 选择器覆盖组件样式</li></ul></li><li><p><strong>类型错误</strong>：</p><ul><li>暂无</li></ul></li><li><p><strong>语音功能异常</strong>：</p><ul><li>检查浏览器权限设置</li></ul></li><li><p><strong>版本问题</strong>：</p><p>Vue 版本过低导致，请升级 Vue3.2+ 或最新版本</p><p>pnpm 版本过低，请升级 10+ 或最新版本</p></li></ol></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guide/develop.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const develop = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  develop as default
};
