// vite.config.ts
import vueJsx from "file:///D:/%E6%88%91%E7%9A%84/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Element-Plus-X/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import Unocss from "file:///D:/%E6%88%91%E7%9A%84/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Element-Plus-X/node_modules/unocss/dist/vite.mjs";
import AutoImport from "file:///D:/%E6%88%91%E7%9A%84/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Element-Plus-X/node_modules/unplugin-auto-import/dist/vite.js";
import ElementPlus from "file:///D:/%E6%88%91%E7%9A%84/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Element-Plus-X/node_modules/unplugin-element-plus/dist/vite.js";
import { ElementPlusResolver } from "file:///D:/%E6%88%91%E7%9A%84/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Element-Plus-X/node_modules/unplugin-vue-components/dist/resolvers.js";
import Components from "file:///D:/%E6%88%91%E7%9A%84/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Element-Plus-X/node_modules/unplugin-vue-components/dist/vite.js";
import { defineConfig } from "file:///D:/%E6%88%91%E7%9A%84/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Element-Plus-X/node_modules/vite/dist/node/index.js";
import eslintPlugin from "file:///D:/%E6%88%91%E7%9A%84/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Element-Plus-X/node_modules/vite-plugin-eslint/dist/index.mjs";
import { tsxAutoProps } from "file:///D:/%E6%88%91%E7%9A%84/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Element-Plus-X/node_modules/vite-plugin-tsx-auto-props/dist/index.js";
import vitepressDemo from "file:///D:/%E6%88%91%E7%9A%84/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/Element-Plus-X/node_modules/vite-plugin-vitepress-demo/dist/index.js";

// scripts/vue-element-plus-x-resolver.ts
function tovUIResolver() {
  return {
    type: "component",
    resolve(name) {
      if (name.startsWith("El") || name.startsWith("el")) {
        return {
          name,
          from: "element-plus"
        };
      }
      if (name === "ClientOnly") {
        return null;
      }
      return {
        name,
        from: "vue-element-plus-x"
      };
    }
  };
}

// vite.config.ts
var vite_config_default = defineConfig({
  plugins: [
    AutoImport({
      imports: ["vue"],
      ignore: ["h", "ClientOnly"],
      resolvers: [
        ElementPlusResolver({
          exclude: /ElButtonGroup/
          // 忽略自动导入 ElButtonGroup
        })
      ]
    }),
    Components({
      resolvers: [tovUIResolver(), ElementPlusResolver()]
    }),
    tsxAutoProps(),
    vitepressDemo({
      // 我们让他自动搜索，我们所有项目中的demos下的vue文件
      // glob: ['**/demos/*.vue'],
    }),
    vueJsx(),
    Unocss(),
    // eslint-disable-next-line ts/no-unsafe-call
    eslintPlugin({
      include: ["packages/**/*.js", "packages/**/*.vue", "packages/**/*.ts"],
      // 根据你的项目结构调整路径
      exclude: [
        "**/node_modules/**",
        "**/.gitignore",
        "**/dist/**",
        "**/cache/**"
      ]
    }),
    ElementPlus({})
  ],
  // 我们使用vite中给我们提供的resolve配置项中的alias来实现一个重命名。
  resolve: {
    alias: [
      // {
      //   // 我们复制我们的utils中的配置，直接修改一下
      //   find: /^vue-element-plus-x/,
      //   // 然后再把utils替换成vue-element-plus-x，这样我们就完成了配置
      //   replacement: path.resolve(baseUrl, 'packages/vue-element-plus-x/src'),
      // },
      // {
      //   // 我们通过正则表达式去匹配以@vue-element-plus-x/utils的导入配置
      //   find: /^@vue-element-plus-x\/utils/,
      //   // 然后我们把路径替换成绝对路径地址
      //   replacement: path.resolve(baseUrl, 'packages/utils/src'),
      // },
      // {
      //   // 我们通过正则表达式去匹配以@vue-element-plus-x/icons
      //   find: /^@vue-element-plus-x\/icons/,
      //   // 然后我们把路径替换成绝对路径地址
      //   replacement: path.resolve(baseUrl, 'packages/icons/src'),
      // },
    ]
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
